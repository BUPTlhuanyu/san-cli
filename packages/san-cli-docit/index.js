/**
 * @file command Component
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
exports.builder = {
    'use-https': {
        type: 'boolean',
        default: false,
        describe: 'Enable https'
    },
    public: {
        type: 'string',
        describe: 'Specify the public URL for the HMR client'
    },
    output: {
        type: 'boolean',
        default: false,
        describe: 'Export static files generated by building'
    },
    config: {
        alias: 'config-file',
        type: 'string',
        describe: 'Project config file'
    },
    theme: {
        type: 'string',
        describe: 'Use theme'
    },
    port: {
        alias: 'p',
        default: 8888,
        type: 'number',
        describe: 'Port number of the URL'
    },
    open: {
        alias: 'O',
        type: 'boolean',
        default: false,
        describe: 'Open Browser after the build is complete'
    },
    host: {
        alias: 'H',
        type: 'string',
        describe: 'Hostname of the URL'
    },
    qrcode: {
        type: 'boolean',
        default: true,
        describe: 'Print out the QRCode of the URL'
    }
};
exports.description = 'Convert Markdown to San component';
exports.command = 'docit [entry]';

exports.handler = cliApi => {
    const Service = require('@baidu/san-cli-service');
    const flatten = require('@baidu/san-cli-utils/utils').flatten;

    const cwd = cliApi.getCwd();
    const {configFile, noProgress, profile, mode = process.env.NODE_ENV, watch} = cliApi;
    // 处理 rc 文件传入的 Service Class arguments
    let {servicePlugins: plugins, useBuiltInPlugin = true, projectOptions} = cliApi.getPresets() || {};

    const service = new Service('docit', {
        cwd,
        configFile,
        watch,
        mode,
        useBuiltInPlugin,
        projectOptions,
        plugins: flatten(plugins),
        useProgress: !noProgress,
        useProfiler: profile
    });
    let run;
    if (cliApi.output) {
        run = require('./build');
    } else {
        run = require('./serve');
    }
    let callback = run.bind(run, cliApi);
    service.run(callback);
};
